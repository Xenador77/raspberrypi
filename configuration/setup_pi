#!/bin/bash
set -euxo pipefail

# My raspberry pi setup file
#
# Warning! This will download my public keys to your user. Change this before
# running it!
#
# Author: Stephen Wood (www.heystephenwood.com)

# This is my apt-cacher mirror
export MIRROR="http://cato:3142"

# Our new user -- me
export NEW_USER="smw"

# My github user. Will pull these public keys
export GITHUB_USER="stephen-mw"

function setup_ramfs(){
    # Improve the life of the SD by limiting the /logs and /tmp directory to
    # a ramfs
    for dir in /var/log /tmp; do
        if ! grep -qP "tmpfs\s+${dir}" /etc/fstab; then
            echo -e "tmpfs\t${dir}\ttmpfs\tdefaults,noatime,nosuid,mode=0774,size=100m\t0 0\n" >> /etc/fstab
        fi
    done
}

function setup_locale(){
    # Set the wifi
    echo 'country=US' >> /etc/wpa_supplicant/wpa_supplicant.conf

    # Set language to EN
    export LANGUAGE=en_US.UTF-8
    export LANG=en_US.UTF-8
    export LC_ALL=en_US.UTF-8
    locale-gen en_US.UTF-8
    dpkg-reconfigure locales

    localectl status
    
    # Set the keyboard to US
    cat > /etc/default/keyboard<<KEYBOARD
XKBMODEL="pc105"
XKBLAYOUT="us"
XKBVARIANT=""
XKBOPTIONS=""
BACKSPACE="guess"
KEYBOARD
}

function install_packages(){
    echo "Acquire::http::Proxy \"${MIRROR}\";" > /etc/apt/apt.conf.d/01proxy

    apt update -y
    apt upgrade -y

    apt install -y    \
        curl          \
        git           \
        ntp           \
        rng-tools     \
        rpi-update    \
        rsyslog       \
        screen        \
        ssh-import-id \
        vim           \
        wget

    rpi-update
}

function setup_vim(){
    # Set VIM as the default editor
    update-alternatives --set editor /usr/bin/vim.basic

    # Vim settings (colors, syntax highlighting, tab space, etc).
    curl 'https://raw.githubusercontent.com/stephen-mw/raspberrypi/master/configuration/vimrc' \
        > /etc/vim/vimrc.local
}

function setup_user(){
    if ! id -u ${NEW_USER}; then
        useradd -m -s /bin/bash -G sudo ${NEW_USER}
    fi

    if ! [[ -d ~smw/.ssh ]]; then
        mkdir ~smw/.ssh
    fi

    ssh-import-id gh:stephen-mw -o ~smw/.ssh/authorized_keys
    chmod 600 ~smw/.ssh/authorized_keys
    chown -R smw:smw ~smw

    # Banish the Pi user
    if id -u pi; then
        userdel -rf pi
    fi

    # Remove all sudoers and allow new user to sudo without passsword
    test -f /etc/sudoers.d/010_pi-nopasswd && rm -fv /etc/sudoers.d/010_pi-nopasswd
    cat >/etc/sudoers.d/01${NEW_USER}<<SUDO
${NEW_USER} ALL=(ALL) NOPASSWD: ALL
SUDO
}

function setup_ssh_keys(){
    # Make sure rng-tools is running
    systemctl start rng-tools
    pushd /etc/ssh/
    rm -rfv -- *_key
    rm -rfv -- *\.pub

    echo 'Generating a new SSH key. Can take a minute or more...'
    echo y | ssh-keygen -t rsa -b 4096 -f ssh_host_rsa_key -N ''
    ssh-keygen -y -f ssh_host_rsa_key > ssh_host_rsa_pub

    systemctl restart sshd
}

function setup_system(){
    # Log everything to the rsyslog server
    echo '*.*  @cato:514' > '/etc/rsyslog.d/custom.conf'
    systemctl restart rsyslog

    # SSH isn't enabled by default?
    systemctl enable ssh
    systemctl start ssh

    # Turn off password authentication 
    sed -i 's/#   PasswordAuthentication yes/    PasswordAuthentication no/g' /etc/ssh/ssh_config

    # Make root a normal login user
    cp -r /etc/skel /root

    # Put your custom functions here
    cat >/etc/profile.d/custom.sh<<CUSTOM
# Better ls command
alias ll="ls -ltr"

# make less case insensitive for searches and display verbose prompt by default
export LESS="-irMS"

# Add terminal colors
export CLICOLOR=1

# Don't put duplicate lines in the history. also, don't save lines that begin
# with a whitespace character
export HISTCONTROL=erasedups:ignorespace
export HISTTIMEFORMAT='%F %T '
export HISTSIZE=20000
shopt -s histappend

# Make the bash history save for all open terminals
export PROMPT_COMMAND='history -a'

# Collapses multi-line commands into a single history item
shopt -s cmdhist

# ignore these short commands in the history
export HISTIGNORE="&:cd:fg:bg:pwd:pd:po:pushd:popd:dirs:ls:jobs:top"
CUSTOM
}

function setup_watchdog() {
    # Restart the Pi if it becomes unavailable for 10 seconds
    echo 'RuntimeWatchdogSec=10s' >> /etc/systemd/system.conf

    systemctl daemon-reexec
}

function final_echo() {
    cat <<'FINAL'
That's it! You're done. You may want to drop a file boot called ssh:

    /boot/ssh

which will enable ssh daemon. Also you can preseed the wifi by dropping a file
in /boot/wpa_supplicant.conf:

network={
    ssid="<WIRELESS ID>"
    psk="<WIRELESS PASSWORD>"
}

which will automatically have it login to your wifi network.

Good luck!

FINAL
}

setup_watchdog
setup_ramfs
setup_locale
install_packages
setup_user
setup_system
setup_ssh_keys
setup_vim
final_echo
